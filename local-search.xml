<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>qemu</title>
    <link href="/2021/01/06/rt-thread-qemu/"/>
    <url>/2021/01/06/rt-thread-qemu/</url>
    
    <content type="html"><![CDATA[<h2 id="RT-Thread-Studio-QEMU-Simulator-Introduction"><a href="#RT-Thread-Studio-QEMU-Simulator-Introduction" class="headerlink" title="RT-Thread Studio QEMU Simulator Introduction"></a>RT-Thread Studio QEMU Simulator Introduction</h2><p>Embedded software development depends on development boards, which can be simulated using virtual machines such as QEMU without a physical development board. QEMU is a virtual machine that supports cross-platform virtualization and can virtual many development boards. To facilitate the development of embedded applications without a development board, RT-Thread Studio provides a QEMU emulation debugger. This article focuses on emulation using the RT-Thread Studio QEMU emulator on the Windows platform.</p><h3 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h3><ol><li>Click <strong>File</strong> button and create RT-Thread project:</li></ol><p><img src="/img/qemu/new_prj.png" alt="new_prj"></p><ol start="2"><li>Project configuration, as shown in the figure below, select QEMU in the <strong>Adapter</strong> configuration TAB and configure the appropriate emulator:</li></ol><p><img src="/img/qemu/create_prj.png" alt="create_prj"></p><ol start="3"><li>Click the <strong>Finish</strong> button, and a new QEMU project will be created in the workspace.</li></ol><h3 id="Switch-Debugger-to-QEMU"><a href="#Switch-Debugger-to-QEMU" class="headerlink" title="Switch Debugger to QEMU"></a>Switch Debugger to QEMU</h3><p>If the current project is an old project or the debugger you are currently selecting is a debugger other than QEMU and you want to use QEMU, click the drop-down box to the right of the Download button and select QEMU:</p><p><img src="/img/qemu/switch_to_qemu.png" alt="switch_to_qemu"></p><p>If the current project has not configured QEMU, after selecting QEMU, the prompt of <strong>QEMU Hasn’t been Configured</strong> will pop up, click <strong>Yes</strong> to display the QEMU configuration interface, the detail configurations  will be described in the next section.</p><p><img src="/img/qemu/qemu1.png" alt="qemu1"></p><h3 id="QEMU-Configuration"><a href="#QEMU-Configuration" class="headerlink" title="QEMU Configuration"></a>QEMU Configuration</h3><p>Click <strong>Open Debugging Configuration</strong> to jump to the QEMU configuration interface, and the parameters can be configured as follows:</p><table><thead><tr><th align="center">Parameter</th><th align="center">command</th></tr></thead><tbody><tr><td align="center">Emulator</td><td align="center">-M</td></tr><tr><td align="center">Cpu Quantity</td><td align="center">-smp</td></tr><tr><td align="center">SD Card Memory</td><td align="center">-sd</td></tr><tr><td align="center">Don’t open grapgic windows</td><td align="center">-nographic</td></tr><tr><td align="center">Use TAP for network</td><td align="center">-net</td></tr><tr><td align="center">Extra Commands</td><td align="center">None</td></tr></tbody></table><p>After filling in the form, click <strong>OK</strong> button to save configuration. The default configuration is as follows:</p><p><img src="/img/qemu/dbg_cfg.png" alt="dbg_cfg"></p><h3 id="Simulation-Debugging"><a href="#Simulation-Debugging" class="headerlink" title="Simulation Debugging"></a>Simulation Debugging</h3><p>Under normal compilation conditions, the IDE will automatically start QEMU and open the serial port by clicking the mode button, and enter breakpoint debugging mode, where you can observe the output of each breakpoint step by step, or execute your own commands in the serial port.</p><p><img src="/img/qemu/print.png" alt="print"></p><h2 id="QEMU-Serial-Debugging"><a href="#QEMU-Serial-Debugging" class="headerlink" title="QEMU Serial Debugging"></a>QEMU Serial Debugging</h2><p>RT-Thread supports FinSH module, and users can use command operations in command line mode. You can view all supported commands by typing ‘help’ at the debugging terminal or by pressing the TAB key. As shown in the figure below, the left is the command, and the right is the command description. The previous step showed you how to start QEMU, and this step shows you how to debug QEMU user programs in a serial port.</p><p><img src="/img/qemu/shell.png" alt="shell"></p><h3 id="View-The-Current-Thread"><a href="#View-The-Current-Thread" class="headerlink" title="View The Current Thread"></a>View The Current Thread</h3><p>To view the current thread and information such as thread state and stack size, please enter the command <code>list_thread</code> :</p><p><img src="/img/qemu/list_thread.png" alt="list_thread"></p><h3 id="Check-The-Timer-Status"><a href="#Check-The-Timer-Status" class="headerlink" title="Check The Timer Status"></a>Check The Timer Status</h3><p>Enter the command <code>list_timer</code>  to view the status of the timer :</p><p><img src="/img/qemu/list_timer.png" alt="list_timer"></p><h3 id="Add-User-Commands"><a href="#Add-User-Commands" class="headerlink" title="Add User Commands"></a>Add User Commands</h3><ol><li>Users can use <code>MSH_CMD_EXPORT</code> to export the command to MSH:</li></ol><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hello_sample</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">1</span>)    &#123;    rt_kprintf(<span class="hljs-string">&quot;hello, world!\n&quot;</span>);    &#125;    <span class="hljs-keyword">return</span> RT_EOK;&#125;MSH_CMD_EXPORT(hello_sample, hello world);</code></pre><ol start="2"><li>After compilation, you can enter the custom command <code>hello_sample</code> at the terminal:</li></ol><p><img src="/img/qemu/hello_world.png" alt="hello_world"></p><h2 id="QEMU-Network-Communication"><a href="#QEMU-Network-Communication" class="headerlink" title="QEMU Network Communication"></a>QEMU Network Communication</h2><p>While the basics of QEMU are described above, here’s how to use the complex peripherals on QEMU. RT-Thread Studio QEMU supports network communication and enables QEMU to connect to the network by enabling LWIP.</p><h3 id="Basic-Function"><a href="#Basic-Function" class="headerlink" title="Basic Function"></a>Basic Function</h3><ol><li>Enable ETH; Click <strong>RT-Thread Settings</strong>, select <strong>Hardware</strong>, and select <strong>Enable Ethernet</strong> function:</li></ol><p><img src="/img/qemu/eth.png" alt="eth"></p><ol start="2"><li>Enable SAL; Select <strong>Components</strong> and Enable <strong>Socket Abstraction Layer</strong>:</li></ol><p><img src="/img/qemu/sal.png" alt="sal"></p><ol start="3"><li>Save Configuration; You can use the combined command <strong>Ctrl+Shift+S</strong>, or the following button to save the configuration:</li></ol><p><img src="/img/qemu/save.png" alt="save"></p><ol start="4"><li>Debugging; Click the <strong>compile</strong> button, and start debugging after the compilation is completed; Enter the <code>ifconfig</code> command in the terminal to query the IP address obtained by QEMU:</li></ol><p><img src="/img/qemu/ifconfig.png" alt="ifconfig"></p><h3 id="Advanced-Function"><a href="#Advanced-Function" class="headerlink" title="Advanced Function"></a>Advanced Function</h3><p>This section introduces the advanced function about ethernet of QEMU.</p><h4 id="IoT-Packages"><a href="#IoT-Packages" class="headerlink" title="IoT Packages"></a>IoT Packages</h4><p>Thanks to RT-Thread’s rich software package, Studio users can quickly develop the application layer instead of focusing on the underlying adaptation. Below is an example of using a package on QEMU.</p><ol><li>Open <strong>RT-Thread Setting</strong> and open <strong>WebClient</strong> software package to enable <strong>WebClient GET/POST samples</strong>:</li></ol><p><img src="/img/qemu/web_client.png" alt="web_client"></p><ol start="2"><li><p>Save configuration;</p></li><li><p>Compile and start debugging;Terminal input command <code>web_get_test</code>, <code>web_post_test</code> to test QEMU network functionality:</p></li></ol><p><img src="/img/qemu/web_test.png" alt="web_test"></p><h4 id="Enable-TAP"><a href="#Enable-TAP" class="headerlink" title="Enable TAP"></a>Enable TAP</h4><p>The default QEMU configuration cannot use the ping command; Once TAP is on, QEMU can use the ping command.</p><ol><li>Install the <a href="https://tap-windows.updatestar.com/">TAP</a> network card  by default all the way:</li></ol><p><img src="/img/qemu/tap_install.png" alt="tap_install"></p><ol start="2"><li>Configure TAP network card; Open the <strong>Network Connections</strong> to change the adapter settings and rename the installed virtual network card to <strong>tap</strong>, as shown below:</li></ol><p><img src="/img/qemu/tap_rename.png" alt="tap_rename"></p><ol start="3"><li>Right click on the current network connection that can access the Internet (Ethernet is used in this paper), open the attribute -&gt; share, select the home network connection as tap, and click ok to complete the setting, as shown in the figure below : (if there is only one network card, there is no need to pull down to select the network card, as long as the box is checked to allow sharing)</li></ol><p><img src="/img/qemu/tap_share.png" alt="tap_share"></p><ol start="4"><li>Configure QEMU; Add TAP configuration and save configuration:</li></ol><p><img src="/img/qemu/TAP_NAME.png" alt="TAP_NAME"></p><ol start="5"><li>Compile, start debugging, and ping test. Enter the command <code>ping www.rt-thread.io</code>:</li></ol><p><img src="/img/qemu/tap_ping.png" alt="tap_ping"></p><h2 id="In-The-End"><a href="#In-The-End" class="headerlink" title="In The End"></a>In The End</h2><p>If you have any questions about Studio, please post them on the <a href="https://club.rt-thread.io/">forum</a> and Studio developers will be more than happy to answer them.</p><p><a href="https://www.rt-thread.io/download.html?download=Studio">RT-Thread | Download (rt-thread.io)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>qemu</tag>
      
      <tag>rt-thread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust_macro</title>
    <link href="/2020/12/16/rust-macro/"/>
    <url>/2020/12/16/rust-macro/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Cppcheck</title>
    <link href="/2020/12/09/Cppcheck%20%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/12/09/Cppcheck%20%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Cppcheck</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust</title>
    <link href="/2020/12/09/Rust/"/>
    <url>/2020/12/09/Rust/</url>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组用一对 <strong>( )</strong> 包括的一组数据，可以包含<strong>不同种类</strong>的数据：</p><pre><code class="hljs rust"><span class="hljs-keyword">let</span> tup: (<span class="hljs-built_in">i32</span>, <span class="hljs-built_in">f64</span>, <span class="hljs-built_in">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">// tup.0 等于 500</span><span class="hljs-comment">// tup.1 等于 6.4</span><span class="hljs-comment">// tup.2 等于 1</span><span class="hljs-keyword">let</span> (x, y, z) = tup;<span class="hljs-comment">// y 等于 6.4</span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组用一对 <strong>[ ]</strong> 包括的<strong>同类型</strong>数据:</p><pre><code class="hljs rust"><span class="hljs-keyword">let</span> c: [<span class="hljs-built_in">i32</span>; <span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<span class="hljs-comment">// c 是一个长度为 5 的 i32 数组</span></code></pre><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>将值绑定到变量。</p><pre><code class="hljs rust"><span class="hljs-keyword">let</span> a：&amp;<span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;rt-thread&quot;</span>; <span class="hljs-comment">/* 字符串 */</span><span class="hljs-keyword">let</span> b：<span class="hljs-built_in">i32</span> = <span class="hljs-number">123</span>; <span class="hljs-comment">/* 整型 */</span><span class="hljs-keyword">let</span> c：<span class="hljs-built_in">f64</span> = <span class="hljs-number">2.0</span>; <span class="hljs-comment">/* 浮点型 */</span></code></pre><h3 id="mut"><a href="#mut" class="headerlink" title="mut"></a>mut</h3><p>可变的变量、引用或指针。</p><pre><code class="hljs rust"><span class="hljs-comment">/* 不使用 mut */</span><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> b = <span class="hljs-number">123</span>;    b += <span class="hljs-number">1</span>;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;b = &#123;:?&#125;&quot;</span>, b);&#125;&gt; error[E0384]: cannot assign twice to immutable variable `b`&gt; --&gt; src\main.rs:<span class="hljs-number">9</span>:<span class="hljs-number">5</span>&gt; |&gt; |     <span class="hljs-keyword">let</span> b = <span class="hljs-number">123</span>;&gt; |         -&gt; |         |&gt; |         first assignment to `b`&gt; |         help: make this binding mutable: `<span class="hljs-keyword">mut</span> b`&gt; |     b += <span class="hljs-number">1</span>;&gt; |     ^^^^^^ cannot assign twice to immutable variable<span class="hljs-comment">/* 使用mut */</span><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> b = <span class="hljs-number">123</span>;    b += <span class="hljs-number">1</span>;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;b = &#123;:?&#125;&quot;</span>, b);&#125;    Finished dev [unoptimized + debuginfo] target(s) <span class="hljs-keyword">in</span> <span class="hljs-number">1.58</span>s     Running `target\debug\greeting.exe`<span class="hljs-number">124</span></code></pre><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>常量和确定性函数。</p><pre><code class="hljs rust"><span class="hljs-keyword">const</span> THING: <span class="hljs-built_in">u32</span> = <span class="hljs-number">0xABAD1DEA</span>;</code></pre><p>不可变变量与常量的区别：</p><ul><li><p>不可变变量可已通过 let 关键词修改变量的值，类型不可修改：</p><pre><code class="hljs rust"><span class="hljs-keyword">let</span> a:<span class="hljs-built_in">i32</span> = <span class="hljs-number">123</span>;<span class="hljs-keyword">let</span> a:<span class="hljs-built_in">i32</span> = <span class="hljs-number">456</span>;</code></pre></li><li><p>常量无法修改，值无法修改，类型无法修改：</p><pre><code class="hljs rust"><span class="hljs-keyword">const</span> THING: <span class="hljs-built_in">u32</span> = <span class="hljs-number">0xABAD1DEA</span>;THING = <span class="hljs-number">0x01</span>; error[E0070]: invalid left-hand side of assignment --&gt; src\main.rs:<span class="hljs-number">4</span>:<span class="hljs-number">11</span>  |<span class="hljs-number">4</span> |     THING = <span class="hljs-number">0x01</span>;  |     ----- ^  |     |  |     cannot assign to this expressionerror: aborting due to previous error</code></pre></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> number = <span class="hljs-number">3</span>;    <span class="hljs-keyword">if</span> number &lt; <span class="hljs-number">5</span> &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;条件为 true&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;条件为 false&quot;</span>);    &#125;&#125;</code></pre><ul><li>条件表达式 number &lt; 5 不需要用小括号包括（注意，不需要不是不允许）</li><li>Rust 中的 if 不存在单语句不用加 {} 的规则，不允许使用一个语句代替一个块</li></ul><h3 id="else-if"><a href="#else-if" class="headerlink" title="else-if"></a>else-if</h3><pre><code class="hljs rust"><span class="hljs-keyword">if</span> &lt;condition&gt; &#123; block <span class="hljs-number">1</span> &#125; <span class="hljs-keyword">else</span> &#123; block <span class="hljs-number">2</span> &#125;</code></pre><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> a = <span class="hljs-number">12</span>;    <span class="hljs-keyword">let</span> b;    <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span> &#123;        b = <span class="hljs-number">1</span>;    &#125;      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">0</span> &#123;        b = -<span class="hljs-number">1</span>;    &#125;      <span class="hljs-keyword">else</span> &#123;        b = <span class="hljs-number">0</span>;    &#125;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;b is &#123;&#125;&quot;</span>, b);&#125;</code></pre><p>Rust 中的条件表达式必须是 bool 类型。</p><p>表达式：</p><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> number = <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &gt; <span class="hljs-number">1</span> &#123;<span class="hljs-number">1</span>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-number">2</span>&#125;;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number = &#123;&#125;&quot;</span>, number);&#125;</code></pre><h3 id="While"><a href="#While" class="headerlink" title="While"></a>While</h3><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> number = <span class="hljs-number">2</span>;    <span class="hljs-keyword">while</span> number &lt; <span class="hljs-number">4</span> &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number = &#123;&#125;&quot;</span>, number);        number += <span class="hljs-number">1</span>;    &#125;&#125;</code></pre><h3 id="For"><a href="#For" class="headerlink" title="For"></a>For</h3><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> a = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>];    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> j = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a.iter() &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a[&#123;:?&#125;] = &#123;:?&#125;&quot;</span>, j, i);        j += <span class="hljs-number">1</span>;    &#125;&#125;</code></pre><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;<span class="hljs-keyword">let</span> a = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>];    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">5</span> &#123;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;a[&#123;&#125;] = &#123;&#125;&quot;</span>, i, a[i]);    &#125;&#125;</code></pre><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> s = [<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>];    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> i = <span class="hljs-number">0</span>;    <span class="hljs-keyword">loop</span> &#123;        <span class="hljs-keyword">let</span> ch = s[i];        <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&#x27;O&#x27;</span> &#123;            <span class="hljs-keyword">break</span>;        &#125;        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;\&#x27;&#123;&#125;\&#x27;&quot;</span>, ch);        i += <span class="hljs-number">1</span>;    &#125;&#125;</code></pre><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>所有权有以下三条规则：</p><ul><li>Rust 中的每个值都有一个变量，称为其所有者。</li><li>一次只能有一个所有者。</li><li>当所有者不在程序运行范围时，该值将被删除。</li></ul><h3 id="变量范围"><a href="#变量范围" class="headerlink" title="变量范围"></a>变量范围</h3><pre><code class="hljs rust">&#123;    <span class="hljs-comment">// 在声明以前，变量 s 无效</span>    <span class="hljs-keyword">let</span> s = <span class="hljs-string">&quot;runoob&quot;</span>;    <span class="hljs-comment">// 这里是变量 s 的可用范围</span>&#125;<span class="hljs-comment">// 变量范围已经结束，变量 s 无效</span></code></pre><h3 id="内存和分配"><a href="#内存和分配" class="headerlink" title="内存和分配"></a>内存和分配</h3><h3 id="变量与数据交互的方式"><a href="#变量与数据交互的方式" class="headerlink" title="变量与数据交互的方式"></a>变量与数据交互的方式</h3><p>变量与数据交互方式主要有移动（Move）和克隆（Clone）两种：</p><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p>多个变量可以在 Rust 中以不同的方式与相同的数据交互：</p><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span>;    <span class="hljs-keyword">let</span> y = x;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x= &#123;&#125;, y= &#123;&#125;&quot;</span>, x, y);&#125;</code></pre><p>这个程序将值 5 绑定到变量 x，然后将 x 的值复制并赋值给变量 y。现在栈中将有两个值 5。此情况中的数据是”基本数据”类型的数据，不需要存储到堆中，仅在栈中的数据的”移动”方式是直接复制，这不会花费更长的时间或更多的存储空间。”基本数据”类型有这些：</p><ul><li>所有整数类型，例如 i32 、 u32 、 i64 等。</li><li>布尔类型 bool，值为 true 或 false 。</li><li>所有浮点类型，f32 和 f64。</li><li>字符类型 char。</li><li>仅包含以上类型数据的元组（Tuples）。</li></ul><p>但如果发生交互的数据在堆中就是另外一种情况</p><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() &#123;    <span class="hljs-keyword">let</span> x = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">&quot;hello&quot;</span>);    <span class="hljs-keyword">let</span> y = x;    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x = &#123;&#125;, y= &#123;&#125;&quot;</span>, x, y);&#125; --&gt; src\main.rs:<span class="hljs-number">4</span>:<span class="hljs-number">31</span>  |<span class="hljs-number">2</span> |     <span class="hljs-keyword">let</span> x = <span class="hljs-built_in">String</span>::from(<span class="hljs-string">&quot;hello&quot;</span>);  |         - move occurs because `x` has type `String`, which does not implement the `Copy` trait<span class="hljs-number">3</span> |     <span class="hljs-keyword">let</span> y = x;  |             - value moved here<span class="hljs-number">4</span> |     <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x = &#123;&#125;, y= &#123;&#125;&quot;</span>, x, y);  |                               ^ value borrowed here after <span class="hljs-keyword">move</span>error: aborting due to previous error</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github actions 的使用流程</title>
    <link href="/2020/11/07/Github%20actions%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2020/11/07/Github%20actions%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-CI-（CONTINUOUS-INTEGRATION）"><a href="#什么是-CI-（CONTINUOUS-INTEGRATION）" class="headerlink" title="什么是 CI （CONTINUOUS INTEGRATION）"></a>什么是 CI （CONTINUOUS INTEGRATION）</h2><p>在持续集成环境中，开发人员将会频繁的提交代码到主干。这些新提交在最终合并到主线之前，都需要通过编译和<a href="http://www.ttlsa.com/auto/">自动化</a>测试流进行验证。这样做是基于之前</p><p>持续集成过程中很重视自动化测试验证结果，以保障所有的提交在合并主线之后的质量问题，对可能出现的一些问题进行预警</p><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><blockquote><p>GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.</p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="创建工作流程"><a href="#创建工作流程" class="headerlink" title="创建工作流程"></a>创建工作流程</h3><ul><li><p>从 GitHub 上的仓库，在 <code>.github/workflow</code> 目录中创建一个名为 <code>superlinter.yml</code> 的新文件。 更多信息请参阅“<a href="https://docs.github.com/cn/free-pro-team@latest/github/managing-files-in-a-repository/creating-new-files">创建新文件</a>”。</p></li><li><p>将以下 YAML 内容复制到 <code>superlinter.yml</code> 文件中。 <strong>注：</strong> 如果您的默认分支不是 <code>main</code>，请更新 <code>DEFAULT_BRANCH</code> 的值以匹配您仓库的默认分支名称。</p><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Super-Linter</span><span class="hljs-comment"># Run this workflow every time a new commit pushed to your repository</span><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><span class="hljs-attr">jobs:</span>  <span class="hljs-comment"># Set the job key. The key is displayed as the job name</span>  <span class="hljs-comment"># when a job name is not provided</span>  <span class="hljs-attr">super-lint:</span>    <span class="hljs-comment"># Name the Job</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">Lint</span> <span class="hljs-string">code</span> <span class="hljs-string">base</span>    <span class="hljs-comment"># Set the type of machine to run on</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-comment"># Checks out a copy of your repository on the ubuntu-latest machine</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>      <span class="hljs-comment"># Runs the Super-Linter action</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">Super-Linter</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">github/super-linter@v3</span>        <span class="hljs-attr">env:</span>          <span class="hljs-attr">DEFAULT_BRANCH:</span> <span class="hljs-string">main</span>          <span class="hljs-attr">GITHUB_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span></code></pre></li><li><p>在仓库中提交工作流程文件会触发 <code>push</code> 事件并运行工作流程。</p></li></ul><h3 id="查看工作流程"><a href="#查看工作流程" class="headerlink" title="查看工作流程"></a>查看工作流程</h3><ul><li><p>在 GitHub 上，导航到仓库的主页面。</p></li><li><p>在仓库名称下，单击 <strong>Actions（操作）</strong>。</p><p><img src="https://docs.github.com/assets/images/help/repository/actions-tab.png" alt="主仓库导航中的操作选项卡"></p></li><li><p>在左侧边栏中，单击您想要查看的工作流程。</p><p><img src="https://docs.github.com/assets/images/help/repository/superlinter-workflow-sidebar.png" alt="左侧边栏中的工作流程列表"></p></li><li><p>从工作流程运行列表中，单击要查看的运行的名称。</p><p><img src="https://docs.github.com/assets/images/help/repository/superlinter-run-name.png" alt="工作流程运行的名称"></p></li><li><p>在左侧边栏中，单击 <strong>Lint code base（Lint 代码库）</strong>作业。</p><p><img src="https://docs.github.com/assets/images/help/repository/superlinter-lint-code-base-job.png" alt="Lint 代码库作业"></p></li><li><p>任何失败的步骤都会自动展开以显示结果。‘</p><p><img src="https://docs.github.com/assets/images/help/repository/super-linter-workflow-results-updated.png" alt="Super linter 工作流程结果"></p></li></ul><h2 id="高阶用法"><a href="#高阶用法" class="headerlink" title="高阶用法"></a>高阶用法</h2><h3 id="定时"><a href="#定时" class="headerlink" title="定时"></a>定时</h3><pre><code class="hljs yaml"><span class="hljs-comment"># Runs at 16:00 UTC on the 1st of every month</span><span class="hljs-attr">schedule:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span>  <span class="hljs-string">&#x27;0 16 1 * *&#x27;</span></code></pre><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><pre><code class="hljs dts"><span class="hljs-symbol">env:</span><span class="hljs-symbol">  SERVER:</span> production</code></pre><ul><li><p>在工作流程中使用 env：</p><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">world</span>    <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">Hello</span> <span class="hljs-string">world</span> <span class="hljs-string">$FIRST_NAME</span> <span class="hljs-string">$middle_name</span> <span class="hljs-string">$Last_Name!</span>    <span class="hljs-attr">env:</span>      <span class="hljs-attr">FIRST_NAME:</span> <span class="hljs-string">Mona</span>      <span class="hljs-attr">middle_name:</span> <span class="hljs-string">The</span>      <span class="hljs-attr">Last_Name:</span> <span class="hljs-string">Octocat</span></code></pre></li><li><p>您也可以使用 <code>GITHUB_ENV</code>  设置工作流程中的以下步骤可以使用的环境变量</p><pre><code class="hljs yaml"><span class="hljs-attr">steps:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">world1</span>    <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span>  <span class="hljs-string">&quot;TEST_ENV=true&quot;</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">$GITHUB_ENV</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">world2</span>    <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$TEST_ENV</span></code></pre></li></ul><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h4 id="使用多个-Python"><a href="#使用多个-Python" class="headerlink" title="使用多个 Python"></a>使用多个 Python</h4><pre><code class="hljs yaml"><span class="hljs-attr">strategy:</span>  <span class="hljs-attr">matrix:</span>    <span class="hljs-attr">python:</span> [<span class="hljs-number">3.5</span>, <span class="hljs-number">3.6</span>, <span class="hljs-number">3.7</span>, <span class="hljs-number">3.8</span>]<span class="hljs-attr">steps:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span>    <span class="hljs-attr">with:</span>      <span class="hljs-attr">python-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.python</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h4 id="使用多个操作系统"><a href="#使用多个操作系统" class="headerlink" title="使用多个操作系统"></a>使用多个操作系统</h4><pre><code class="hljs yaml"><span class="hljs-attr">runs-on:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><span class="hljs-attr">strategy:</span>  <span class="hljs-attr">matrix:</span>    <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-16.04</span>, <span class="hljs-string">ubuntu-18.04</span>]    <span class="hljs-attr">python:</span> [<span class="hljs-number">3.5</span>, <span class="hljs-number">3.6</span>, <span class="hljs-number">3.7</span>, <span class="hljs-number">3.8</span>]<span class="hljs-attr">steps:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span>    <span class="hljs-attr">with:</span>      <span class="hljs-attr">python-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.python</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h4 id="在矩阵中使用环境变量"><a href="#在矩阵中使用环境变量" class="headerlink" title="在矩阵中使用环境变量"></a>在矩阵中使用环境变量</h4><p>Example: <a href="https://github.com/RT-Thread/rt-thread/blob/master/.github/workflows/action.yml">RT-Thread action</a></p><pre><code class="hljs yaml"><span class="hljs-attr">strategy:</span><span class="hljs-comment"># 设置为 true 时，如果任何 matrix 作业失败，GitHub 将取消所有进行中的作业。 默认值：true</span>  <span class="hljs-attr">fail-fast:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">matrix:</span>   <span class="hljs-attr">legs:</span>     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;CME_M7&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;apollo2&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;asm9260t&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;at91sam9260&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;allwinner_tina&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;efm32&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;gd32e230k-start&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;gd32303e-eval&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;              <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;gd32450z-eval&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;gkipc&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;imx6sx/cortex-a9&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;imxrt/imxrt1052-atk-commander&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;       <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;imxrt/imxrt1052-fire-pro&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;imxrt/imxrt1052-nxp-evk&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;lm3s8962&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;     <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">&quot;lm3s9b9x&quot;</span>, <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">&quot;sourcery-arm&quot;</span>&#125;<span class="hljs-attr">steps:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Python</span>    <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-python@master</span>    <span class="hljs-attr">with:</span>      <span class="hljs-attr">python-version:</span> <span class="hljs-number">3.8</span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Bsp</span> <span class="hljs-string">Scons</span> <span class="hljs-string">Compile</span>    <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">success()</span> <span class="hljs-string">&#125;&#125;</span>    <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span>    <span class="hljs-attr">env:</span>      <span class="hljs-attr">RTT_BSP:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.legs.RTT_BSP</span> <span class="hljs-string">&#125;&#125;</span>      <span class="hljs-attr">RTT_TOOL_CHAIN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.legs.RTT_TOOL_CHAIN</span> <span class="hljs-string">&#125;&#125;</span>    <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>      <span class="hljs-string">scons</span> <span class="hljs-string">-C</span> <span class="hljs-string">bsp/$RTT_BSP</span></code></pre><h3 id="if-语法"><a href="#if-语法" class="headerlink" title="if 语法"></a>if 语法</h3><p>Example: <a href="https://github.com/RT-Thread-Studio/sdk-index/blob/master/.github/workflows/action.yml">RT-ThreadStudio action</a></p><p>可以使用 <code>if</code> 条件阻止作业在条件得到满足之前运行。 可以使用任何支持上下文和表达式来创建条件</p><h4 id="主分支触发"><a href="#主分支触发" class="headerlink" title="主分支触发"></a>主分支触发</h4><p>检查触发工作流程的分支本仓库并且上一个步骤成功时才会执行，否则跳过该步骤：</p><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate-Import-Compile</span>  <span class="hljs-attr">shell:</span> <span class="hljs-string">bash</span>  <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.ref</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;refs/heads/master&#x27;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">success()</span> <span class="hljs-string">&#125;&#125;</span>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>    <span class="hljs-string">cd</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.workspace</span> <span class="hljs-string">&#125;&#125;</span></code></pre><h4 id="合并时触发"><a href="#合并时触发" class="headerlink" title="合并时触发"></a>合并时触发</h4><pre><code class="hljs css"><span class="hljs-selector-tag">if</span>: <span class="hljs-selector-tag">github</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.pull_request</span><span class="hljs-selector-class">.merged</span></code></pre><h2 id="Marketplace"><a href="#Marketplace" class="headerlink" title="Marketplace"></a>Marketplace</h2><p>你可以在 Github 的 Marketplace 发现很多 Actions, 将这些已经写好的 action 添加到你的 CI 文件中，会减少开发者的工作量</p><h4 id="Checkout-V2"><a href="#Checkout-V2" class="headerlink" title="Checkout V2"></a>Checkout V2</h4><p><a href="https://github.com/actions/checkout">链接</a></p><blockquote><p>This action checks-out your repository under <code>$GITHUB_WORKSPACE</code>, so your workflow can access it.</p></blockquote><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span></code></pre><h4 id="setup-python-V2"><a href="#setup-python-V2" class="headerlink" title="setup-python V2"></a>setup-python V2</h4><p><a href="https://github.com/actions/setup-python">链接</a></p><blockquote><p>This action sets up a Python environment for</p></blockquote><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Python</span>  <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-python@master</span>  <span class="hljs-attr">with:</span>    <span class="hljs-attr">python-version:</span> <span class="hljs-number">3.8</span></code></pre><h4 id="Upload-Artifact-v2"><a href="#Upload-Artifact-v2" class="headerlink" title="Upload-Artifact v2"></a>Upload-Artifact v2</h4><p><a href="https://github.com/actions/upload-artifact">链接</a></p><blockquote><p>This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.</p></blockquote><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">txt</span>  <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;hellowold&quot;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">test.txt</span><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Upload</span> <span class="hljs-string">Results</span>  <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.ref</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;refs/heads/master&#x27;</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">success()</span> <span class="hljs-string">&#125;&#125;</span>  <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/upload-artifact@v2</span>  <span class="hljs-attr">continue-on-error:</span> <span class="hljs-literal">True</span>  <span class="hljs-attr">with:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">check-report</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.workspace</span> <span class="hljs-string">&#125;&#125;/test.txt</span></code></pre><h4 id="file-existence-action"><a href="#file-existence-action" class="headerlink" title="file-existence-action"></a>file-existence-action</h4><p><a href="https://github.com/andstor/file-existence-action/">链接</a></p><blockquote><p>This is a GitHub Action to check for existence of files. It can be used for conditionally running workflow steps based on file(s) existence.</p></blockquote><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;File existence check&quot;</span><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>, <span class="hljs-string">pull_request</span>]<span class="hljs-attr">jobs:</span>  <span class="hljs-attr">file_existence:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">steps:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">file</span> <span class="hljs-string">existence</span>        <span class="hljs-attr">id:</span> <span class="hljs-string">check_files</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">andstor/file-existence-action@v1</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">files:</span> <span class="hljs-string">&quot;package.json, LICENSE, README.md&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">File</span> <span class="hljs-string">exists</span>        <span class="hljs-attr">if:</span> <span class="hljs-string">steps.check_files.outputs.files_exists</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span>        <span class="hljs-comment"># Only runs if all of the files exists</span>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">All</span> <span class="hljs-string">files</span> <span class="hljs-string">exists!</span></code></pre><h4 id="Close-Stale-Issues-and-PRs"><a href="#Close-Stale-Issues-and-PRs" class="headerlink" title="Close Stale Issues and PRs"></a>Close Stale Issues and PRs</h4><p><a href="https://github.com/actions/stale">链接</a></p><blockquote><p>Warns and then closes issues and PRs that have had no activity for a specified amount of time.</p></blockquote><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Close stale issues&quot;</span><span class="hljs-attr">on:</span>  <span class="hljs-attr">schedule:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span> <span class="hljs-string">&quot;30 1 * * *&quot;</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">stale:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">steps:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/stale@v3</span>      <span class="hljs-attr">with:</span>        <span class="hljs-attr">repo-token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span>        <span class="hljs-attr">stale-issue-message:</span> <span class="hljs-string">&#x27;Message to comment on stale issues. If none provided, will not mark issues stale&#x27;</span>        <span class="hljs-attr">stale-pr-message:</span> <span class="hljs-string">&#x27;Message to comment on stale PRs. If none provided, will not mark PRs stale&#x27;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>actions</tag>
      
      <tag>ci</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>emscripten 使用指南</title>
    <link href="/2020/11/07/emscripten/"/>
    <url>/2020/11/07/emscripten/</url>
    
    <content type="html"><![CDATA[<h2 id="要事优先"><a href="#要事优先" class="headerlink" title="要事优先"></a>要事优先</h2><p>首先是确保你已经下载并且安装好了 Emscripten。根据你的操作系统不同，下载和安装过程稍有不同。</p><p>Emscripten 主要是通过 emcc（Emscripten Compiler Frontend）来工作的。这是个命令行工具，它会调用其他编译需要的工具，可以将它看成是标准编译器比如 gcc 或者 clang 的命令行版本。wimdows 系统的话，命令行中使用 emcc，Linux 下使用./emcc。</p><h2 id="验证-Emscripten"><a href="#验证-Emscripten" class="headerlink" title="验证 Emscripten"></a>验证 Emscripten</h2><p>第一次使用 Emscripten，请先使用以下命令验证 Emscripten 是否正确安装：</p><pre><code class="hljs text">emcc -v</code></pre><p>如果有警告发生，可能是因为缺少一些工具，请去看 [这个链接解决](<a href="https://link.zhihu.com/?target=http://kripken.github.io/emscripten-site/docs/building_from_source/verify_emscripten_environment.html%23verifying-the-emscripten-environment">Verifying the Emscripten Development Environment</a>)</p><p>如果没有警告或报错，就往下看。</p><h2 id="运行-Emscripten"><a href="#运行-Emscripten" class="headerlink" title="运行 Emscripten"></a>运行 Emscripten</h2><p>现在就可以使用 Emscripten 把 C/C++ 代码编译成 JavaScript 了。</p><p>首先，写一个待编译为 JavaScript 的 C 文件。比如 hello_world.c，像下面这样：</p><pre><code class="hljs text">#include &lt;stdio.h&gt;   int main() &#123;     printf(&quot;hello, world!\n&quot;);     return 0;   &#125;</code></pre><p>注：这是 Emscripten 提供的测试集中最简单的一个 C 文件。</p><p>为了编译这个 C 文件，你只需要在 test 目录下打开命令行，emcc 后面跟上这个文件名就行了。</p><pre><code class="hljs text">emcc tests/hello_world.c</code></pre><p>注：test 目录是 Emscripten 测试集的目录。</p><p>这样就会在 test 目录下生成一个 a.out.js 文件，你可以使用 node 运行这个 a.out.js。</p><pre><code class="hljs text">node a.out.js</code></pre><p>就会在 node 控制台打印出 hello world！了。</p><pre><code class="hljs text">如果编译失败，你可以在 emcc tests/hello_world.c 后面加个 - v，也就是变成 emcc tests/hello_world.c -v ，这样呢就会有一些调试信息，你可以参考他们，找出编译失败的原因。</code></pre><h2 id="生成-HTML"><a href="#生成-HTML" class="headerlink" title="生成 HTML"></a>生成 HTML</h2><p>Emscripten 能为刚才输出的那个 JavaScript 生成 HTML 文件，你可以使用 - o 命令指定要输出的 html 文件名。</p><pre><code class="hljs text">emcc tests/hello_world.c -o hello.html</code></pre><p>在浏览器打开这个 hello.html。你会看到，这个 HTML 页面中有一块文本区域是为了显示 C 代码中 printf() 函数打印的内容。</p><p>实际上，这块区域不仅可以显示文本。如果你 C 代码中调用了 SDL 的 API，那么也可以在一块 canvas 中显示一个五彩斑斓的 cube。比如，hello_world_cube.cpp 那个测试用例就是这样。那个测试用例的代码是：</p><pre><code class="hljs text">#include &lt;stdio.h&gt;#include &lt;SDL/SDL.h&gt;#ifdef __EMSCRIPTEN__#include &lt;emscripten.h&gt;#endifextern &quot;C&quot; int main(int argc, char** argv) &#123; printf(&quot;hello, world!\n&quot;); SDL_Init(SDL_INIT_VIDEO); SDL_Surface *screen = SDL_SetVideoMode(256, 256, 32, SDL_SWSURFACE);#ifdef TEST_SDL_LOCK_OPTS EM_ASM(&quot;SDL.defaults.copyOnLock = false; SDL.defaults.discardOnLock = true; SDL.defaults.opaqueFrontBuffer = false;&quot;);#endif if (SDL_MUSTLOCK(screen)) SDL_LockSurface(screen); for (int i = 0; i &lt; 256; i++) &#123;   for (int j = 0; j &lt; 256; j++) &#123;#ifdef TEST_SDL_LOCK_OPTS     // Alpha behaves like in the browser, so write proper opaque pixels.     int alpha = 255;#else    // To emulate native behavior with blitting to screen, alpha component is ignored. Test that it is so by outputting     // data (and testing that it does get discarded)     int alpha = (i+j) % 255;#endif     *((Uint32*)screen-&gt;pixels + i * 256 + j) = SDL_MapRGBA(screen-&gt;format, i, j, 255-i, alpha);   &#125; &#125; if (SDL_MUSTLOCK(screen)) SDL_UnlockSurface(screen); SDL_Flip(screen); printf(&quot;you should see a smoothly-colored square - no sharp lines but the square borders!\n&quot;); printf(&quot;and here is some text that should be HTML-friendly: amp: |&amp;| double-quote: |\&quot;| quote: |&#x27;| less-than, greater-than, html-like tags: |&lt;cheez&gt;&lt;/cheez&gt;|\nanother line.\n&quot;); SDL_Quit(); return 0;&#125;</code></pre><h2 id="使用文件"><a href="#使用文件" class="headerlink" title="使用文件"></a>使用文件</h2><pre><code class="hljs text">C/C++ 中，可以用 libc 库的 fopen,fclose 等 API 来访问文件</code></pre><p>js 运行在浏览器的沙盒环境中，并不能直接访问本地文件系统，不过，Emscripten 模拟了一个文件系统，这样你可以在你的 C/C++ 代码中继续使用 libc 的 API。</p><p>你想访问的文件应该通过 preload 或者 embedded 的方式打包到 Emscripten 虚拟的文件系统中。</p><p>测试集中，hello_world_file.cpp 展示了怎么加载一个文件。测试代码和测试文件 hello_world_file.txt 如下面所示：</p><pre><code class="hljs text">#include &lt;stdio.h&gt;   int main() &#123;     FILE *file = fopen(&quot;tests/hello_world_file.txt&quot;, &quot;rb&quot;);     if (!file) &#123;       printf(&quot;cannot open file\n&quot;);       return 1;     &#125;     while (!feof(file)) &#123;       char c = fgetc(file);       if (c != EOF) &#123;         putchar(c);       &#125;     &#125;     fclose (file);     return 0;   &#125;</code></pre><pre><code class="hljs text">==   This data has been read from a file.   The file is readable as if it were at the same location in the filesystem, including directories, as in the local filesystem where you compiled the source.   ==</code></pre><p>下面命令是 ** 在任何编译代码运行前 ** 指定一个数据文件预加载到 Emscripten 的虚拟文件系统。这个方法很有用，因为浏览器只能异步获取数据的，而原生代码（C/C++）很多都是使用的同步文件 API，那么，用这个方法可以确保数据加载完成之前，编译代码（C/C++ 编译之后的 js）不会从 Emscripten 的虚拟文件系统中去取数据，也就不会出错。下面是编译命令：</p><pre><code class="hljs text">./emcc tests/hello_world_file.cpp -o hello.html --preload-file tests/hello_world_file.txt</code></pre><p>运行生成的 HTML，就能看到 hello_world_file.txt 文件的内容。</p><h2 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h2><p>默认情况下，和 gcc 以及 clang 等编译器一样，Emscripten 生成的编译代码没有经过编译优化。那么，你可以在命令行参数中使用 - O1，生成轻微优化的代码。</p><pre><code class="hljs text">./emcc -O1 tests/hello_world.cpp</code></pre><p>因为编译生成 a.out.js 的过程实际上并不真的需要优化，所以实际上你加不加 - O1，从编译时间（或者说编译速度）上，你是看不出区别的。</p><p>但是真的没区别吗？</p><p>你可以看看生成的 a.out.js 文件，就能发现还是有区别的。-O1 的优化有一些微小的优化并且清除了一些运行时断言，比如，在生成的代码中，printf 函数，会被替换成 put。</p><p>想编译优化，不仅可以用 - O1，还可以用 - O2，-O2 优化的程度更厉害。你可以试一下，它的编译代码跟 - O1 又有很大差别。</p><h2 id="Emscripten-测试集"><a href="#Emscripten-测试集" class="headerlink" title="Emscripten 测试集"></a>Emscripten 测试集</h2><p>Emscripten 给大家提供了非常多的测试用例，几乎覆盖了 Emscripten 的所有功能。对于开发者来说，这是非常好的资源。</p><p>关于测试集的更多情况，[可以点击了解](<a href="https://link.zhihu.com/?target=http://kripken.github.io/emscripten-site/docs/getting_started/test-suite.html%23emscripten-test-suite">Emscripten Test Suite</a>)。</p>]]></content>
    
    
    
    <tags>
      
      <tag>emscripten</tag>
      
      <tag>webassembly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-Template 使用指南</title>
    <link href="/2020/11/02/python-Template%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2020/11/02/python-Template%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>Template 无疑是一个好东西，可以将字符串的格式固定下来，重复利用。同时 Template 也可以让开发人员可以分别考虑字符串的格式和其内容了，无形中减轻了开发人员的压力。</p><p>Template 属于 string 中的一个类，所以要使用的话可以用以下方式调用</p><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">import</span> Template</code></pre><p>Template 有个特殊标示符 $, 它具有以下的规则：</p><p>它的主要实现方式为 $xxx, 其中 xxx 是满足 python 命名规则的字符串，即不能以数字开头，不能为关键字等</p><p>如果 $xxx 需要和其他字符串接触时，可用 {} 将 xxx 包裹起来（以前似乎使用’()’, 我的一本参考书上是这样写的，但是现在的版本应该只能使用’{}’）。例如，aaa${xxx}aaa</p><p>Template 中有两个重要的方法：substitute 和 safe_substitute.</p><p>这两个方法都可以通过获取参数返回字符串</p><pre><code class="hljs python">&gt;&gt;s=Template(There $a <span class="hljs-keyword">and</span> $b)&gt;&gt;print(s.subtitute(a=<span class="hljs-string">&#x27;apple&#x27;</span>,b=<span class="hljs-string">&#x27;banana&#x27;</span>))There apple <span class="hljs-keyword">and</span> banana&gt;&gt;print(s.safe_substitute(a=<span class="hljs-string">&#x27;apple&#x27;</span>,b=<span class="hljs-string">&#x27;banbana&#x27;</span>))There apple <span class="hljs-keyword">and</span> banbana</code></pre><p>还可以通过获取字典直接传递数据, 像这样</p><pre><code class="hljs python">&gt;&gt;s=Template(There $a <span class="hljs-keyword">and</span> $b)&gt;&gt;d=&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;banbana&#x27;</span>&#125;&gt;&gt;print(s.substitute(d))There apple <span class="hljs-keyword">and</span> banbana</code></pre><p>它们之间的差别在于对于参数缺少时的处理方式。</p><p>Template 的 实现方式是首先通过 Template 初始化一个字符串。这些字符串中包含了一个个 key。通过调用 substitute 或 safe_subsititute，将 key 值与方法中传递过来的参数对应上，从而实现在指定的位置导入字符串。这个方式的一个好处是不用像 print (‘%s’) 之类的方式，各个参数的顺序必须固定，只要 key 是正确的，值就能正确插入。通过这种方式，在插入很多数据的时候就可以松口气了。可是即使有这样偷懒的方法，依旧不能保证不出错，如果 key 少输入了一个怎么办呢？</p><p>substitute 是一个严肃的方法，如果有 key 没有输入，那就一定会报错。虽然会很难看，但是可以发现问题。</p><p>safe_substitute 则不会报错，而是将 $xxx 直接输入到结果字符串中，如</p><pre><code class="hljs nginx"><span class="hljs-attribute">there</span> apple and <span class="hljs-variable">$b</span></code></pre><p>这样的好处是程序总是对的，不用被一个个错误搞得焦头烂额。</p><p>Template 可以被继承, 它的子类可以进行一些‘个性化’操作…</p><p>通过修改 delimiter 字段可以将 $ 字符改变为其他字符，如 “#”，不过新的标示符需要符合正则表达式的规范。</p><p>通过修改 idpattern 可以修改 key 的命名规则，比如说规定第一个字符开头必须是 a，这对规范命名倒是很有好处。当然，这也是通过正则表示实现的。</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> Template<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTemplate</span>(<span class="hljs-params">Template</span>):</span>    delimiter = <span class="hljs-string">&quot;#&quot;</span>    idpattern = <span class="hljs-string">&quot;[a][_a-z0-9]*&quot;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span>    s=<span class="hljs-string">&#x27;#aa is not #ab&#x27;</span>    t=MyTemplate(s)    d=&#123;<span class="hljs-string">&#x27;aa&#x27;</span>:<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;ab&#x27;</span>:<span class="hljs-string">&#x27;banbana&#x27;</span>&#125;    print(t.substitute(d))<span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:    test()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Template</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2020/10/21/docker/"/>
    <url>/2020/10/21/docker/</url>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
